// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persons.Entities.Contexts;

namespace Persons.Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220512082952_AddedRolesToDb")]
    partial class AddedRolesToDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "17789cf8-1026-4e31-b1a4-1d124d8db7a8",
                            ConcurrencyStamp = "6db14bfa-fd86-4f98-bff6-61e0f66e9a0f",
                            Name = "EM",
                            NormalizedName = "Employee"
                        },
                        new
                        {
                            Id = "ff140e88-0284-425d-9bf2-a3a34678cf95",
                            ConcurrencyStamp = "25f7a2bf-baef-4021-9bc0-dcf2a30496e3",
                            Name = "SP",
                            NormalizedName = "Sales Person"
                        },
                        new
                        {
                            Id = "923f45bb-773c-4c5a-9b33-4797d47dd659",
                            ConcurrencyStamp = "ac2cc384-0464-46f2-9fde-3a16f76e1bef",
                            Name = "IN",
                            NormalizedName = "Individual Customer"
                        },
                        new
                        {
                            Id = "51620088-d468-4eb4-b4d5-7bfa8baeba35",
                            ConcurrencyStamp = "3693bcde-91fa-4cc2-9def-bbeaedcedfe0",
                            Name = "SC",
                            NormalizedName = "Store Contact"
                        },
                        new
                        {
                            Id = "ddb37cba-6dad-4cb8-9952-9fdd6ff7db7f",
                            ConcurrencyStamp = "27aa7e79-0188-468c-86fd-03c9e197266a",
                            Name = "VC",
                            NormalizedName = "Vendor Contact"
                        },
                        new
                        {
                            Id = "3868cb19-bdfb-4ae7-bd21-38c62c6f4870",
                            ConcurrencyStamp = "ef0cd33c-0ec6-4742-8c2a-70ec6823b276",
                            Name = "GC",
                            NormalizedName = "General Contact"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Persons.Entities.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for Address records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("First street address line.");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Second street address line.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Name of the city.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Postal code for the street address.");

                    b.Property<int>("StateProvinceID")
                        .HasColumnType("int")
                        .HasComment("Unique identification number for the state or province. Foreign key to StateProvince table.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("AddressID");

                    b.HasIndex(new[] { "rowguid" }, "AK_Address_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressLine1", "AddressLine2", "City", "StateProvinceID", "PostalCode" }, "IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode")
                        .IsUnique()
                        .HasFilter("[AddressLine1] IS NOT NULL AND [AddressLine2] IS NOT NULL AND [City] IS NOT NULL AND [PostalCode] IS NOT NULL");

                    b.HasIndex(new[] { "StateProvinceID" }, "IX_Address_StateProvinceID");

                    b.ToTable("Address", "Person");

                    b
                        .HasComment("Street address information for customers, employees, and vendors.");
                });

            modelBuilder.Entity("Persons.Entities.Models.AddressType", b =>
                {
                    b.Property<int>("AddressTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for AddressType records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Address type description. For example, Billing, Home, or Shipping.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("AddressTypeID");

                    b.HasIndex(new[] { "Name" }, "AK_AddressType_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "rowguid" }, "AK_AddressType_rowguid")
                        .IsUnique();

                    b.ToTable("AddressType", "Person");

                    b
                        .HasComment("Types of addresses stored in the Address table. ");
                });

            modelBuilder.Entity("Persons.Entities.Models.BusinessEntity", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for all customers, vendors, and employees.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("BusinessEntityID");

                    b.HasIndex(new[] { "rowguid" }, "AK_BusinessEntity_rowguid")
                        .IsUnique();

                    b.ToTable("BusinessEntity", "Person");

                    b
                        .HasComment("Source of the ID that connects vendors, customers, and employees with address and contact information.");
                });

            modelBuilder.Entity("Persons.Entities.Models.BusinessEntityAddress", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to BusinessEntity.BusinessEntityID.");

                    b.Property<int>("AddressID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to Address.AddressID.");

                    b.Property<int>("AddressTypeID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to AddressType.AddressTypeID.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("BusinessEntityID", "AddressID", "AddressTypeID")
                        .HasName("PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID");

                    b.HasIndex(new[] { "rowguid" }, "AK_BusinessEntityAddress_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "AddressID" }, "IX_BusinessEntityAddress_AddressID");

                    b.HasIndex(new[] { "AddressTypeID" }, "IX_BusinessEntityAddress_AddressTypeID");

                    b.ToTable("BusinessEntityAddress", "Person");

                    b
                        .HasComment("Cross-reference table mapping customers, vendors, and employees to their addresses.");
                });

            modelBuilder.Entity("Persons.Entities.Models.BusinessEntityContact", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to BusinessEntity.BusinessEntityID.");

                    b.Property<int>("PersonID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Foreign key to Person.BusinessEntityID.");

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int")
                        .HasComment("Primary key.  Foreign key to ContactType.ContactTypeID.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("BusinessEntityID", "PersonID", "ContactTypeID")
                        .HasName("PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID");

                    b.HasIndex(new[] { "rowguid" }, "AK_BusinessEntityContact_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "ContactTypeID" }, "IX_BusinessEntityContact_ContactTypeID");

                    b.HasIndex(new[] { "PersonID" }, "IX_BusinessEntityContact_PersonID");

                    b.ToTable("BusinessEntityContact", "Person");

                    b
                        .HasComment("Cross-reference table mapping stores, vendors, and employees to people");
                });

            modelBuilder.Entity("Persons.Entities.Models.ContactType", b =>
                {
                    b.Property<int>("ContactTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for ContactType records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Contact type description.");

                    b.HasKey("ContactTypeID");

                    b.HasIndex(new[] { "Name" }, "AK_ContactType_Name")
                        .IsUnique();

                    b.ToTable("ContactType", "Person");

                    b
                        .HasComment("Lookup table containing the types of business entity contacts.");
                });

            modelBuilder.Entity("Persons.Entities.Models.CountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("ISO standard code for countries and regions.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Country or region name.");

                    b.HasKey("CountryRegionCode")
                        .HasName("PK_CountryRegion_CountryRegionCode");

                    b.HasIndex(new[] { "Name" }, "AK_CountryRegion_Name")
                        .IsUnique();

                    b.ToTable("CountryRegion", "Person");

                    b
                        .HasComment("Lookup table containing the ISO standard codes for countries and regions.");
                });

            modelBuilder.Entity("Persons.Entities.Models.EmailAddress", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasComment("Primary key. Person associated with this email address.  Foreign key to Person.BusinessEntityID");

                    b.Property<int>("EmailAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key. ID of this email address.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EmailAddress")
                        .HasComment("E-mail address for the person.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("BusinessEntityID", "EmailAddressID")
                        .HasName("PK_EmailAddress_BusinessEntityID_EmailAddressID");

                    b.HasIndex(new[] { "EmailAddress1" }, "IX_EmailAddress_EmailAddress");

                    b.ToTable("EmailAddress", "Person");

                    b
                        .HasComment("Where to send a person email.");
                });

            modelBuilder.Entity("Persons.Entities.Models.Password", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasComment("Password for the e-mail account.");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasComment("Random value concatenated with the password string before the password is hashed.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("BusinessEntityID")
                        .HasName("PK_Password_BusinessEntityID");

                    b.ToTable("Password", "Person");

                    b
                        .HasComment("One way hashed authentication information");
                });

            modelBuilder.Entity("Persons.Entities.Models.Person", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasComment("Primary key for Person records.");

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("xml")
                        .HasComment("Additional contact information about the person stored in xml format. ");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml")
                        .HasComment("Personal information such as hobbies, and income collected from online shoppers. Used for sales analysis.");

                    b.Property<int>("EmailPromotion")
                        .HasColumnType("int")
                        .HasComment("0 = Contact does not wish to receive e-mail promotions, 1 = Contact does wish to receive e-mail promotions from AdventureWorks, 2 = Contact does wish to receive e-mail promotions from AdventureWorks and selected partners. ");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First name of the person.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last name of the person.");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Middle name or middle initial of the person.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit")
                        .HasComment("0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true)
                        .HasComment("Primary type of person: SC = Store Contact, IN = Individual (retail) customer, SP = Sales person, EM = Employee (non-sales), VC = Vendor contact, GC = General contact");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Surname suffix. For example, Sr. or Jr.");

                    b.Property<string>("Title")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("A courtesy title. For example, Mr. or Ms.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("BusinessEntityID")
                        .HasName("PK_Person_BusinessEntityID");

                    b.HasIndex(new[] { "rowguid" }, "AK_Person_rowguid")
                        .IsUnique();

                    b.HasIndex(new[] { "LastName", "FirstName", "MiddleName" }, "IX_Person_LastName_FirstName_MiddleName");

                    b.HasIndex(new[] { "AdditionalContactInfo" }, "PXML_Person_AddContact");

                    b.HasIndex(new[] { "Demographics" }, "PXML_Person_Demographics");

                    b.HasIndex(new[] { "Demographics" }, "XMLPATH_Person_Demographics");

                    b.HasIndex(new[] { "Demographics" }, "XMLPROPERTY_Person_Demographics");

                    b.HasIndex(new[] { "Demographics" }, "XMLVALUE_Person_Demographics");

                    b.ToTable("Person", "Person");

                    b
                        .HasComment("Human beings involved with AdventureWorks: employees, customer contacts, and vendor contacts.");
                });

            modelBuilder.Entity("Persons.Entities.Models.PersonPhone", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int")
                        .HasComment("Business entity identification number. Foreign key to Person.BusinessEntityID.");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Telephone number identification number.");

                    b.Property<int>("PhoneNumberTypeID")
                        .HasColumnType("int")
                        .HasComment("Kind of phone number. Foreign key to PhoneNumberType.PhoneNumberTypeID.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.HasKey("BusinessEntityID", "PhoneNumber", "PhoneNumberTypeID")
                        .HasName("PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID");

                    b.HasIndex("PhoneNumberTypeID");

                    b.HasIndex(new[] { "PhoneNumber" }, "IX_PersonPhone_PhoneNumber");

                    b.ToTable("PersonPhone", "Person");

                    b
                        .HasComment("Telephone number and type of a person.");
                });

            modelBuilder.Entity("Persons.Entities.Models.PhoneNumberType", b =>
                {
                    b.Property<int>("PhoneNumberTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for telephone number type records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the telephone number type");

                    b.HasKey("PhoneNumberTypeID");

                    b.ToTable("PhoneNumberType", "Person");

                    b
                        .HasComment("Type of phone number of a person.");
                });

            modelBuilder.Entity("Persons.Entities.Models.SalesTerritory", b =>
                {
                    b.Property<int>("TerritoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for SalesTerritory records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Business costs in the territory the previous year.");

                    b.Property<decimal>("CostYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Business costs in the territory year to date.");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. ");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Geographic area to which the sales territory belong.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Sales territory description");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Sales in the territory the previous year.");

                    b.Property<decimal>("SalesYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))")
                        .HasComment("Sales in the territory year to date.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("TerritoryID")
                        .HasName("PK_SalesTerritory_TerritoryID");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex(new[] { "Name" }, "AK_SalesTerritory_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "rowguid" }, "AK_SalesTerritory_rowguid")
                        .IsUnique();

                    b.ToTable("SalesTerritory", "Sales");

                    b
                        .HasComment("Sales territory lookup table.");
                });

            modelBuilder.Entity("Persons.Entities.Models.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for StateProvince records.")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("ISO standard country or region code. Foreign key to CountryRegion.CountryRegionCode. ");

                    b.Property<bool?>("IsOnlyStateProvinceFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("0 = StateProvinceCode exists. 1 = StateProvinceCode unavailable, using CountryRegionCode.");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Date and time the record was last updated.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("State or province description.");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true)
                        .HasComment("ISO standard state or province code.");

                    b.Property<int>("TerritoryID")
                        .HasColumnType("int")
                        .HasComment("ID of the territory in which the state or province is located. Foreign key to SalesTerritory.SalesTerritoryID.");

                    b.Property<Guid>("rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())")
                        .HasComment("ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.");

                    b.HasKey("StateProvinceID");

                    b.HasIndex("CountryRegionCode");

                    b.HasIndex("TerritoryID");

                    b.HasIndex(new[] { "Name" }, "AK_StateProvince_Name")
                        .IsUnique();

                    b.HasIndex(new[] { "StateProvinceCode", "CountryRegionCode" }, "AK_StateProvince_StateProvinceCode_CountryRegionCode")
                        .IsUnique();

                    b.HasIndex(new[] { "rowguid" }, "AK_StateProvince_rowguid")
                        .IsUnique();

                    b.ToTable("StateProvince", "Person");

                    b
                        .HasComment("State and province lookup table.");
                });

            modelBuilder.Entity("Persons.Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Persons.Entities.Models.vAdditionalContactInfo", b =>
                {
                    b.Property<int>("BusinessEntityID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryRegion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EMailAddress")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EMailSpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMailTelephoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomeAddressSpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelephoneSpecialInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("rowguid")
                        .HasColumnType("uniqueidentifier");

                    b.ToView("vAdditionalContactInfo", "Person");

                    b
                        .HasComment("Displays the contact name and content from each element in the xml column AdditionalContactInfo for that person.");
                });

            modelBuilder.Entity("Persons.Entities.Models.vStateProvinceCountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryRegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsOnlyStateProvinceFlag")
                        .HasColumnType("bit");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nchar(3)")
                        .IsFixedLength(true);

                    b.Property<int>("StateProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("StateProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TerritoryID")
                        .HasColumnType("int");

                    b.ToView("vStateProvinceCountryRegion", "Person");

                    b
                        .HasComment("Joins StateProvince table with CountryRegion table.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Persons.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Persons.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Persons.Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persons.Entities.Models.Address", b =>
                {
                    b.HasOne("Persons.Entities.Models.StateProvince", "StateProvince")
                        .WithMany("Addresses")
                        .HasForeignKey("StateProvinceID")
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("Persons.Entities.Models.BusinessEntityAddress", b =>
                {
                    b.HasOne("Persons.Entities.Models.Address", "Address")
                        .WithMany("BusinessEntityAddresses")
                        .HasForeignKey("AddressID")
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.AddressType", "AddressType")
                        .WithMany("BusinessEntityAddresses")
                        .HasForeignKey("AddressTypeID")
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityAddresses")
                        .HasForeignKey("BusinessEntityID")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("Persons.Entities.Models.BusinessEntityContact", b =>
                {
                    b.HasOne("Persons.Entities.Models.BusinessEntity", "BusinessEntity")
                        .WithMany("BusinessEntityContacts")
                        .HasForeignKey("BusinessEntityID")
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.ContactType", "ContactType")
                        .WithMany("BusinessEntityContacts")
                        .HasForeignKey("ContactTypeID")
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.Person", "Person")
                        .WithMany("BusinessEntityContacts")
                        .HasForeignKey("PersonID")
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("ContactType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Entities.Models.EmailAddress", b =>
                {
                    b.HasOne("Persons.Entities.Models.Person", "BusinessEntity")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("BusinessEntityID")
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("Persons.Entities.Models.Password", b =>
                {
                    b.HasOne("Persons.Entities.Models.Person", "BusinessEntity")
                        .WithOne("Password")
                        .HasForeignKey("Persons.Entities.Models.Password", "BusinessEntityID")
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("Persons.Entities.Models.Person", b =>
                {
                    b.HasOne("Persons.Entities.Models.BusinessEntity", "BusinessEntity")
                        .WithOne("Person")
                        .HasForeignKey("Persons.Entities.Models.Person", "BusinessEntityID")
                        .IsRequired();

                    b.Navigation("BusinessEntity");
                });

            modelBuilder.Entity("Persons.Entities.Models.PersonPhone", b =>
                {
                    b.HasOne("Persons.Entities.Models.Person", "BusinessEntity")
                        .WithMany("PersonPhones")
                        .HasForeignKey("BusinessEntityID")
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.PhoneNumberType", "PhoneNumberType")
                        .WithMany("PersonPhones")
                        .HasForeignKey("PhoneNumberTypeID")
                        .IsRequired();

                    b.Navigation("BusinessEntity");

                    b.Navigation("PhoneNumberType");
                });

            modelBuilder.Entity("Persons.Entities.Models.SalesTerritory", b =>
                {
                    b.HasOne("Persons.Entities.Models.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("SalesTerritories")
                        .HasForeignKey("CountryRegionCode")
                        .IsRequired();

                    b.Navigation("CountryRegionCodeNavigation");
                });

            modelBuilder.Entity("Persons.Entities.Models.StateProvince", b =>
                {
                    b.HasOne("Persons.Entities.Models.CountryRegion", "CountryRegionCodeNavigation")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryRegionCode")
                        .IsRequired();

                    b.HasOne("Persons.Entities.Models.SalesTerritory", "Territory")
                        .WithMany("StateProvinces")
                        .HasForeignKey("TerritoryID")
                        .IsRequired();

                    b.Navigation("CountryRegionCodeNavigation");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("Persons.Entities.Models.Address", b =>
                {
                    b.Navigation("BusinessEntityAddresses");
                });

            modelBuilder.Entity("Persons.Entities.Models.AddressType", b =>
                {
                    b.Navigation("BusinessEntityAddresses");
                });

            modelBuilder.Entity("Persons.Entities.Models.BusinessEntity", b =>
                {
                    b.Navigation("BusinessEntityAddresses");

                    b.Navigation("BusinessEntityContacts");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Persons.Entities.Models.ContactType", b =>
                {
                    b.Navigation("BusinessEntityContacts");
                });

            modelBuilder.Entity("Persons.Entities.Models.CountryRegion", b =>
                {
                    b.Navigation("SalesTerritories");

                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("Persons.Entities.Models.Person", b =>
                {
                    b.Navigation("BusinessEntityContacts");

                    b.Navigation("EmailAddresses");

                    b.Navigation("Password");

                    b.Navigation("PersonPhones");
                });

            modelBuilder.Entity("Persons.Entities.Models.PhoneNumberType", b =>
                {
                    b.Navigation("PersonPhones");
                });

            modelBuilder.Entity("Persons.Entities.Models.SalesTerritory", b =>
                {
                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("Persons.Entities.Models.StateProvince", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
